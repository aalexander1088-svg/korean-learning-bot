import { KoreanDatabase } from './database';
import * as dotenv from 'dotenv';

dotenv.config();

async function importVocabulary() {
  const database = new KoreanDatabase();
  
  // Your Korean vocabulary and grammar
  const vocabularyData = `
Í∞ÄÏßÄÍ≥† Í∞ÄÎã§ - to take with
Í∞ÄÏ†∏ Í∞ÄÎã§ - to take with
Î∞ñÏóê ÎÇòÍ∞ÄÏïº ÎèºÏöî - have to go outside
Îì§Ïñ¥Í∞ÄÎã§ - to go in
Ï´ìÏïÑ Îã§ÎãàÎã§ - to chase around
Í∑∏Î¶º - painting
ÌôîÍ∞Ä - painter
Í±∏Îã§ - to hang
Íµ¨Î©ç - hole
Î™ª - nail
Î™ªÏùÑ Î∞ïÎã§ - to nail
Î≤Ω - wall
ÎàïÎã§ - to lie down
Ïò¨Î†§ ÎÜìÎã§ - to put up
ÎÇ¥Î†§ ÎÜìÎã§ - to put down
Ïò§Î•¥Îã§ - to climb
Ïò¨ÎùºÍ∞ÄÎã§ - to go up
Ïò¨ÎùºÏò§Îã§ - to come up
Îç∞Î¶¨Îü¨ Í∞ÄÎã§ - to go pick up
Îç∞Î¶¨Îü¨ Ïò§Îã§ - to come pick up
ÌéåÌÇ®Ïä§ÌååÏù¥Ïä§ÎùºÎñº - pumpkin spice latte
Ìï©ÏπòÎã§ - to combine, merge
ÏòÅÏÉÅ - video
Ïä§Ìä∏Î†àÏπ≠ - stretching
Îì± - back
Ïô∏Ïö∞Îã§ - to memorize
ÏóÖÌûê Îã¨Î¶¨Í∏∞ - uphill running
Ïò§Î•¥ÎßâÍ∏∏ - uphill path
ÎÇ¥Î¶¨ÎßâÍ∏∏ - downhill path
ÌèâÌèâÌïòÎã§ - to be flat, even
Îß®Î∞ú - barefoot
ÏµúÏÜåÌïú - minimum
ÏµúÎåÄÌïú - maximum
Î≥µÏû°Ìïú - complicated
Îã®ÏàúÌïòÎã§ - to be simple
Îã®ÏàúÌïòÍ≤å - simply
Ìù°ÏàòÌïòÎã§ - to absorb
Ï∂©Í≤© - shock
Îã¨Î¶¨Îã§ - to run
Îã¨Î¶¨Í∏∞ÌïòÎã§ - to go for a run
ÏòÅÌñ• - influence, impact
Ïú†Ìñâ - trend
Ïò§Ìä∏Î∞ÄÌÅ¨ - oat milk
ÎÖ∏Îûò - songs
ÎßåÌôî - cartoon, comics
ÏöîÎ¶¨ÏÇ¨ - chef
ÎåÄÍ≤∞ - battle, competition, match
ÏÜåÎ¶¨Í∞Ä ÎÇòÏöî - there is a sound
ÏßàÎ¨∏ - question
Î¨∏Ï†ú - problem
ÏßÄÏó≠ - area
ÌÉúÏñ¥ÎÇòÎã§ - to be born
ÏïÑÎ¨¥ÎèÑ ÏóÜÏóàÏñ¥Ïöî - there was no one
Í≥†ÏπòÎã§ - to fix
Ï§ëÏöîÌïòÎã§ - important
Î≥¥Ïó¨Ï£ºÎã§ - to show
ÎäêÍª¥Ï†∏Ïöî - to feel like
ÏôÑÏÑ±ÎêòÎã§ - to be completed
Ïã†Í≤Ω Ïïà Ïì∞Îã§ - don't care
Îã®ÏàúÌï¥ÏßÄÎã§ - to become simple
ÏöîÏ≤≠ÌïòÎã§ - to request
Í≥†ÎØºÌïòÎã§ - to think (considering)
ÎèÑÎßùÍ∞ÄÎã§ - run away
ÎÇ®Îã§ - to remain/to be left
ÏûòÎ™ªÌïòÎã§ - to do something wrong
Ï†ÅÏö©ÎêòÎã§ - to be applied
Ïù¥ÎßòÎïåÏØ§Ïù¥Î©¥ - around this time
ÌòÑÏû¨ - currently
ÎìúÎîîÏñ¥ - finally
Îã¨Î¶¨Í∏∞ - running
Ïã¨Ïã¨Ìï¥Ïöî - boring
ÏßÄÎ£®Ìïú - boring
Î∞©Î≤ï - method/way
Î¨ºÏñ¥ Î¥§Ïñ¥Ïöî - asked me
ÎåÄÎ∂ÄÎ∂Ñ - mostly
Î™©Ïù¥ ÎßàÎ•¥Îã§ - thirsty
ÏïΩÏÜç - appointment
ÌôïÏù∏ÌïòÎã§ - to check
ÌôïÏù∏ÎêòÎã§ - to confirm
ÏôúÎÉêÎ©¥ - because
ÏãúÍ∞Ñ ÎÇ≠ÎπÑ - waste of time
Ïã†Í∏∞ÌïòÎã§ - to be interesting
Í¥ÄÏã¨ÏûàÎã§ - to be interested in
Ïã†Í∏∞Ìï¥Ïöî - interesting!
Í¥ÄÏã¨ÌïòÎã§ - interested
Î≠êÎùºÍ≥† Î∂àÎü¨Ïöî - what do you call it
ÌôîÍ∞Ä ÎÇ¨Ïñ¥Ïöî - are you angry
Ìó∑Í∞àÎ†∏Ïñ¥Ïöî - I was confused
Ï±ôÍ∏∞Îã§ - to gather
Ï±ôÍ≤® Í∞ÄÎã§ - take with you
Í∞êÏ†ïÏù¥ ÏóÜÎã§ - to not have emotions
Î∂àÌèâÌïòÎã§ - to complain
Îì±Î°ùÌñàÏñ¥ - signed up
ÏßÄÍ∏àÍπåÏßÄ - until now
ÎÇòÏù¥Î•º Î®πÎã§ - to get older
Í≤ΩÌóò - experience
Ïû¨Î∞åÎäî Í≤ΩÌóò - fun experience
Î≠îÍ∞Ä Î≥¥Ïó¨ ÎìúÎ¶¥Í≤åÏöî - let me show you something
ÏµúÍ∑ºÏóê - recently
Í∂ÅÍ∏àÌïòÎ©¥ - if you're curious
Ï†ïÎ∞òÎåÄ - totally opposite
ÎèôÎ¨º - animal
Í≥†Î•¥Îã§ - choose
ÏÇ∞ÌÖçÌïòÎã§ - choose
Í≥ÑÏÇ∞ÌïòÎã§ - pay for something
Ïñ¥Ï©åÎùºÍ≥† - so what
Î∞©Î¨∏ÌïòÎã§ - to visit
ÏßàÍ∏¥ Í≥†Í∏∞ - tough meat
ÏòàÎ•ºÎì§Î©¥ - for example
ÏÑ§Ïπò - install
ÏàòÎ¶¨ÌïòÎã§ - fix a thing
ÌíàÏßà - product quality
ÎÜÄÎûòÎã§ - surprised
ÌîºÎ∂Ä - skin
Î¶¨Í∞Ä ÏóÜÏñ¥Ïöî - there is no way/it can't be
Ïù¥Ïú† - reason
Í≤ÄÏùÄÏÉâ - black (color)
ÌïòÏñÄÏÉâ - white (color)
Ï§Ñ ÏïåÎã§ - to know that
Ï§Ñ Î™®Î•¥Îã§ - to not know that
Ï§ÑÏù¥Îã§ - to reduce
Ïó≠Ìï† - role
Í±∞Î¶¨ - distance
ÏßÄÎ∂ï - roof
Ï•ê - mouse
Î©çÏ≤≠ÌïòÎã§ - to be stupid, dumb
Ïä§ÏªπÌÅ¨ - skunk
Î∞∞ÎìúÎØºÌÑ¥ - badminton
Wholefoods - Wholefoods
Aldi - Aldi
ÎπÑÎãê Î¥âÏßÄ - plastic bag
Í≥†ÏñëÏù¥ Í∞ÑÏãù - cat treat
ÎòëÎòëÌïòÎã§ - to be smart
Î∞îÎ≥¥ - fool
Î©çÏ≤≠Ìïú ÏÇ¨Îûå - stupid person
ÏÉàÏïÑÎπ† - stepfather
ÏïÑÎπ† Ïó≠Ìï† - father role
ÏÉàÏßë - new house
ÏπúÍµ¨Í∞Ä ÎêòÎã§ - to become friends
Ïò¨ÎùºÍ∞ÄÎã§ - to go up
ÏÉà - bird
Ïû°Îã§ - to catch
`;

  console.log('üìö Starting vocabulary import...');
  
  // Split by lines and process each line
  const lines = vocabularyData.split('\n').map(line => line.trim()).filter(line => line.length > 0);
  
  let importedCount = 0;
  let skippedCount = 0;

  for (const line of lines) {
    try {
      // Try different formats
      let korean = '';
      let english = '';

      // Format 1: "Korean - English"
      if (line.includes(' - ')) {
        const parts = line.split(' - ');
        korean = parts[0].trim();
        english = parts[1].trim();
      }
      // Format 2: "Korean: English"
      else if (line.includes(': ')) {
        const parts = line.split(': ');
        korean = parts[0].trim();
        english = parts[1].trim();
      }
      // Format 3: "Korean English" (space separated)
      else if (line.includes(' ')) {
        const parts = line.split(' ');
        korean = parts[0].trim();
        english = parts.slice(1).join(' ').trim();
      }
      // Format 4: Just Korean word (skip if no English)
      else {
        console.log(`‚ö†Ô∏è Skipping line (no English found): ${line}`);
        skippedCount++;
        continue;
      }

      // Validate that we have both Korean and English
      if (korean && english && korean.length > 0 && english.length > 0) {
        // Check if already exists
        const existing = await database.getAllVocabulary();
        const alreadyExists = existing.some(word => 
          word.korean === korean && word.english === english
        );

        if (!alreadyExists) {
          await database.storeVocabulary([{
            korean: korean,
            english: english
          }]);
          console.log(`‚úÖ Added: ${korean} - ${english}`);
          importedCount++;
        } else {
          console.log(`‚è≠Ô∏è Already exists: ${korean} - ${english}`);
          skippedCount++;
        }
      } else {
        console.log(`‚ö†Ô∏è Skipping line (invalid format): ${line}`);
        skippedCount++;
      }
    } catch (error) {
      console.error(`‚ùå Error processing line "${line}":`, error);
      skippedCount++;
    }
  }

  console.log(`\nüìä Import Summary:`);
  console.log(`‚úÖ Imported: ${importedCount} words`);
  console.log(`‚è≠Ô∏è Skipped: ${skippedCount} words`);
  console.log(`üìö Total in database: ${(await database.getAllVocabulary()).length} words`);
  
  await database.close();
}

// Run the import
importVocabulary().catch(console.error);





